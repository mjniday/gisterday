#!/usr/bin/env ruby
require_relative '../lib/gist.rb'

options = {}

opt_parser = OptionParser.new do |opt|
  opt.banner = "Usage: gist [COMMAND] [OPTIONS]"
  opt.separator  ""
  opt.separator  "Commands"
  opt.separator  "     gist <blank>:   create a new gist in text editor"
  opt.separator  "     gist  <file>:   create a new gist using the specified file"
  opt.separator  "     gist   login:   log in to github account"
  opt.separator  ""
  opt.separator  "Options"
  opt.separator  "     -a:   create the gist anonymously so that it isn't associated with your GitHub account"
  opt.separator  "     -d:   set the description of the gist"
  opt.separator  "     -h:   show help"
  opt.separator  "     -v:   view full http response"

  opt.on("-a","create the gist anonymously") do |description|
    options[:anonymous] = true
  end

  opt.on("-d","--description DESCRIPTION","set the gist description") do |description|
    options[:description] = description
  end

  opt.on("-v","--verbose","view full response of the http request") do
    options[:verbose] = true
  end

  opt.on("-h","--help","help") do
    puts opt_parser
  end
end

opt_parser.parse!

if Dir.entries(".").include? ARGV[0]
	contents = Gisterday.read_file(ARGV[0])
	Gisterday.create_gist(ARGV[0],contents,options)
else
	case ARGV[0]
		when "login"
			puts "Logging in..."
			connection = Gisterday::GitHubAuth.new
			connection.begin_authentication
		when "help"
		  puts opt_parser
		else
			file = ARGV[0] || "gisterday_file.rb"
			system %Q(vim +"put ='# When you save this file, a gist will be created.'" #{file})

			# check if user saved and create gist if so
			if Dir.entries(".").include? file
				contents = Gisterday.read_file(file)
				Gisterday.create_gist(file,contents,options)
			end
	end
end

